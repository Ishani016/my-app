{"version":3,"sources":["serviceWorker.js","search-component.js","index.js"],"names":["Boolean","window","location","hostname","match","Search","_this","this","react_default","a","createElement","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","value","props","searchValue","onChange","e","searchValueOnChange","React","Component","Covid","_React$Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSearchValueOnChange","bind","assertThisInitialized","state","covidData","displayedData","inherits","createClass","key","tableData","forEach","data","casesToday","concat","cases","todayCases","deathsToday","deaths","todayDeaths","push","Alert","variant","Heading","country","recovered","isEmpty","Spinner","as","animation","size","role","aria-hidden","Table","hover","responsive","Badge","getTableBody","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","filter","toLowerCase","indexOf","target","setState","getDisplayedData","getHeader","search_component_Search","getTable","getSpinner","_this2","document","title","fetch","then","results","json","ReactDOM","render","src_Covid","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.262ea5b4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nexport default class Search extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <InputGroup className=\"mb-3\">\r\n    <FormControl\r\n      placeholder=\"Search for a country..\"\r\n      aria-label=\"Recipient's username\"\r\n      aria-describedby=\"basic-addon2\"\r\n      value={this.props.searchValue}\r\n      onChange={e => this.props.searchValueOnChange(e)}\r\n    />\r\n  </InputGroup>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport  get  from 'lodash/get';\nimport  filter  from 'lodash/filter';\nimport forEach from 'lodash/forEach';\nimport  isEmpty  from 'lodash/isEmpty';\nimport Container from 'react-bootstrap/Container';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Badge from 'react-bootstrap/Badge';\nimport Alert from 'react-bootstrap/Alert';\nimport * as serviceWorker from './serviceWorker';\nimport { KeyObject } from 'crypto';\nimport Search from './search-component';\n\nexport class Covid extends React.Component {\n  constructor(props) {\n\t\tsuper(props);\n\t\tthis.handleSearchValueOnChange = this.handleSearchValueOnChange.bind(this);\n    this.state = {\n\t\t\tcovidData: {},\n\t\t\tdisplayedData: {},\n\t\t\tsearchValue: \"\"\n    };\n\t}\n\n\tgetTableBody() {\n\t\tlet tableData = [];\n\t\tforEach(this.state.displayedData, (data, key) => {\n\t\t\tconst casesToday = `${data.cases} | ${data.todayCases}`;\n\t\t\tconst deathsToday = `${data.deaths} | ${data.todayDeaths}`;\n\t\t\ttableData.push(\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<Alert variant=\"primary\">\n\t\t\t\t\t\t\t\t<Alert.Heading>\n\t\t\t\t\t\t\t\t\t\t{data.country} \n\t\t\t\t\t\t\t\t</Alert.Heading>\n\t\t\t\t\t\t\t\t<hr />\n  \n\t\t\t\t\t\t</Alert>\n\t\t\t\t\t</td>\n\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<Alert variant=\"primary\">\n\t\t\t\t\t\t\t\t<Alert.Heading>\n\t\t\t\t\t\t\t\t\t\t{casesToday}\n\t\t\t\t\t\t\t\t</Alert.Heading>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t</Alert>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<Alert variant=\"success\">\n\t\t\t\t\t\t\t\t<Alert.Heading>\n\t\t\t\t\t\t\t\t\t\t{data.recovered}\n\t\t\t\t\t\t\t\t</Alert.Heading>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t</Alert>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<Alert variant=\"danger\">\n\t\t\t\t\t\t\t\t<Alert.Heading>\n\t\t\t\t\t\t\t\t\t\t{deathsToday} \n\t\t\t\t\t\t\t\t</Alert.Heading>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t</Alert>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t);\n\t});\n\t\treturn tableData;\n\t}\n\n\tgetSpinner() {\n\t\tif (isEmpty(this.state.covidData)) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t\t<Spinner\n\t\t\t\t\t\tas=\"span\"\n\t\t\t\t\t\tanimation=\"grow\"\n\t\t\t\t\t\tsize=\"md\"\n\t\t\t\t\t\trole=\"status\"\n\t\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t\t/>\n\t\t\t\t\t\tLoading...\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\tgetTable() {\n\t\treturn (\n\t\t\t<Table \n\t\t\thover \n\t\t\tvariant=\"dark\"\n\t\t\tresponsive\n\t\t\tsize=\"sm\">\n\t\t\t <thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>\n\t\t\t\t\t<Badge variant=\"light\"\n\t\t\t\t\t\tclassName=\"covid__table-header\"\n\t\t\t\t\t>Country</Badge>\n\t\t\t\t\t</th>\n\t\t\t\t\t<th><Badge variant=\"light\"\n\t\t\t\t\t\tclassName=\"covid__table-header\"\n\t\t\t\t\t>Cases (Total | Today)</Badge></th>\n\t\t\t\t\t<th><Badge variant=\"light\"\n\t\t\t\t\t\tclassName=\"covid__table-header\"\n\t\t\t\t\t>Recovered</Badge></th>\n\t\t\t\t\t<th><Badge variant=\"light\"\n\t\t\t\t\t\tclassName=\"covid__table-header\"\n\t\t\t\t\t>Deaths (Total | Today)</Badge></th>\n\t\t\t\t</tr>\n\t\t\t </thead>\n\t\t\t <tbody>\n\t\t\t\t {this.getTableBody()}\n\t\t\t </tbody>\n\t\t\t</Table>\n\t\t);\n\t}\n\t\n\tgetHeader() {\n\t\treturn(\n\t\t\t<div className=\"covid__full-data-body\">\n\t\t\t\t<Accordion>\n  <Card>\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n      Global Coronavirus Information\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey=\"0\">\n\t\t\t<Card.Body>\n\t\t\t\tThe data is updated every 24 hours and has been taken from official WHO statistics\n\t\t\t\t<hr />\n\t\t\t\tStay Home. Stay Safe\n\t\t\t</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tgetDisplayedData(searchValue) {\n\t\tconst displayedData = filter(this.state.covidData, (data, key) => {\n\t\t\tconst country = data.country.toLowerCase();\n\t\t\treturn country.indexOf(searchValue.toLowerCase()) === 0;\n\t\t});\n\t\treturn displayedData;\n\t}\n\n\thandleSearchValueOnChange(e) {\n\t\tconst searchValue = e.target.value;\n\t\tthis.setState({\n\t\t\tsearchValue: searchValue,\n\t\t\tdisplayedData: this.getDisplayedData(searchValue)\n\t\t});\n\t}\n  \n  render(){\n\t\t\n\t\t/*let options = [];\n\t\tif (!isEmpty(covid)) {\n\t\t\tforEach(covid, (data, value) => {\n\t\t\t\t\tconsole.log(data, value);\n\t\t\t\t\tconsole.log(\"jell\");\n\t\t\t});\n\t\t}*/\n\t\t\n\t  return (\n\t\t\t<div className=\"covid__body\">\n\t\t\t\t{this.getHeader()}\n\t\t\t\t<div className=\"covid__search-component\">\n\t\t\t\t\t<Search \n\t\t\t\t\t\tsearchValue={this.state.searchValue}\n\t\t\t\t\t\tsearchValueOnChange={this.handleSearchValueOnChange}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"covid__table\">\n\t\t\t\t\t\t{this.getTable()}\n\t\t\t\t\t\t{this.getSpinner()}\n\t\t\t\t</div>\n\t\t\t</div>\n    );\n\t}\n\tcomponentDidMount(){\n\t\tdocument.title = \"Covid Update\";\n\t\t/*fetch('https://pomber.github.io/covid19/timeseries.json')\n\t\t.then(results => {\n\t\t\t\treturn results.json();\n\t\t}).then(data => {\n\t\t\tthis.setState({\n\t\t\t\tcovidData: data\n\t\t\t});\n\t\t});*/\n\n\t\tfetch('https://coronavirus-19-api.herokuapp.com/countries')\n\t\t.then(results => {\n\t\t\t\treturn results.json();\n\t\t}).then(data => {\n\t\t\tthis.setState({\n\t\t\t\tcovidData: data,\n\t\t\t\tdisplayedData: data\n\t\t\t});\n\t\t});\n  }\n}\n\nReactDOM.render(\n  <Covid />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}